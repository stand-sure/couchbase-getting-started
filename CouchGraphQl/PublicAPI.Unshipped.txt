abstract CouchGraphQl.Data.AccessorBase<T, TCreate>.MakeEntity(int id, TCreate createInfo) -> T
CouchGraphQl.Data.AccessorBase<T, TCreate>
CouchGraphQl.Data.AccessorBase<T, TCreate>.AccessorBase(CouchGraphQl.Data.MyBucketContext! bucketContext, Microsoft.Extensions.Logging.ILogger<CouchGraphQl.Data.AccessorBase<T, TCreate>!>! logger) -> void
CouchGraphQl.Data.AccessorBase<T, TCreate>.CreateAsync(TCreate createInfo, string! scope = "inventory") -> System.Threading.Tasks.Task<T?>!
CouchGraphQl.Data.AccessorBase<T, TCreate>.Queryable.get -> System.Linq.IQueryable<T>!
CouchGraphQl.Data.AirlineAccessor
CouchGraphQl.Data.AirlineAccessor.AirlineAccessor(CouchGraphQl.Data.MyBucketContext! bucketContext, Microsoft.Extensions.Logging.ILogger<CouchGraphQl.Data.AirlineAccessor!>! logger) -> void
CouchGraphQl.Data.AirlineAccessor.CreateAsync(CouchGraphQl.Data.Documents.AirlineCreateInput! createInput) -> System.Threading.Tasks.Task<CouchGraphQl.Data.Documents.Airline?>!
CouchGraphQl.Data.Documents.Airline
CouchGraphQl.Data.Documents.Airline.Airline() -> void
CouchGraphQl.Data.Documents.Airline.Airline(int id, CouchGraphQl.Data.Documents.AirlineCreateInput! createInput) -> void
CouchGraphQl.Data.Documents.Airline.Id.get -> int
CouchGraphQl.Data.Documents.Airline.Id.set -> void
CouchGraphQl.Data.Documents.Airline.Type.get -> string!
CouchGraphQl.Data.Documents.Airline.Type.set -> void
CouchGraphQl.Data.Documents.AirlineCreateInput
CouchGraphQl.Data.Documents.AirlineCreateInput.AirlineCreateInput() -> void
CouchGraphQl.Data.Documents.AirlineCreateInput.Callsign.get -> string?
CouchGraphQl.Data.Documents.AirlineCreateInput.Callsign.set -> void
CouchGraphQl.Data.Documents.AirlineCreateInput.Country.get -> string?
CouchGraphQl.Data.Documents.AirlineCreateInput.Country.set -> void
CouchGraphQl.Data.Documents.AirlineCreateInput.Iata.get -> string?
CouchGraphQl.Data.Documents.AirlineCreateInput.Iata.set -> void
CouchGraphQl.Data.Documents.AirlineCreateInput.Icao.get -> string?
CouchGraphQl.Data.Documents.AirlineCreateInput.Icao.set -> void
CouchGraphQl.Data.Documents.AirlineCreateInput.Name.get -> string?
CouchGraphQl.Data.Documents.AirlineCreateInput.Name.set -> void
CouchGraphQl.Data.Documents.IEntityWithId<T>
CouchGraphQl.Data.Documents.IEntityWithId<T>.Id.get -> T
CouchGraphQl.Data.Documents.IEntityWithId<T>.Id.set -> void
CouchGraphQl.Data.Documents.IEntityWithId<T>.Type.get -> string!
CouchGraphQl.Data.Documents.IEntityWithId<T>.Type.set -> void
CouchGraphQl.Data.MyBucketContext
CouchGraphQl.Data.MyBucketContext.Airlines.get -> Couchbase.Linq.IDocumentSet<CouchGraphQl.Data.Documents.Airline!>!
CouchGraphQl.Data.MyBucketContext.Airlines.set -> void
CouchGraphQl.Data.MyBucketContext.MyBucketContext(Couchbase.IBucket! bucket) -> void
CouchGraphQl.GraphQl.AirlineFilterInput
CouchGraphQl.GraphQl.AirlineFilterInput.AirlineFilterInput() -> void
CouchGraphQl.GraphQl.AirlineMutations
CouchGraphQl.GraphQl.AirlineMutations.AirlineMutations() -> void
CouchGraphQl.GraphQl.AirlineMutations.CreateAirlineAsync(CouchGraphQl.Data.AirlineAccessor! airlineAccessor, CouchGraphQl.Data.Documents.AirlineCreateInput! airlineCreateInput) -> System.Threading.Tasks.Task<CouchGraphQl.Data.Documents.Airline?>!
CouchGraphQl.GraphQl.AirlineQueries
CouchGraphQl.GraphQl.AirlineQueries.AirlineQueries() -> void
CouchGraphQl.GraphQl.AirlineQueries.GetAirlines(CouchGraphQl.Data.AirlineAccessor! airlineAccessor) -> System.Linq.IQueryable<CouchGraphQl.Data.Documents.Airline!>!
CouchGraphQl.GraphQl.AirlineSortInput
CouchGraphQl.GraphQl.AirlineSortInput.AirlineSortInput() -> void
CouchGraphQl.GraphQl.AirlineType
CouchGraphQl.GraphQl.AirlineType.AirlineType() -> void
CouchGraphQl.GraphQl.ObjectTypeWithId<T>
CouchGraphQl.GraphQl.ObjectTypeWithId<T>.ObjectTypeWithId() -> void
CouchGraphQl.Program
CouchGraphQl.Program.Program() -> void
override CouchGraphQl.Data.AirlineAccessor.MakeEntity(int id, CouchGraphQl.Data.Documents.AirlineCreateInput! createInfo) -> CouchGraphQl.Data.Documents.Airline!
override CouchGraphQl.GraphQl.AirlineFilterInput.Configure(HotChocolate.Data.Filters.IFilterInputTypeDescriptor<CouchGraphQl.Data.Documents.Airline!>! descriptor) -> void
override CouchGraphQl.GraphQl.AirlineSortInput.Configure(HotChocolate.Data.Sorting.ISortInputTypeDescriptor<CouchGraphQl.Data.Documents.Airline!>! descriptor) -> void
override CouchGraphQl.GraphQl.ObjectTypeWithId<T>.Configure(HotChocolate.Types.IObjectTypeDescriptor<T>! descriptor) -> void
virtual CouchGraphQl.GraphQl.ObjectTypeWithId<T>.ConfigureImplementation(HotChocolate.Types.IObjectTypeDescriptor<T>! descriptor) -> void