abstract CouchGraphQl.Data.AccessorBase<T, TCreate>.MakeEntity(int id, TCreate createInfo) -> T
CouchGraphQl.Data.AccessorBase<T, TCreate>
CouchGraphQl.Data.AccessorBase<T, TCreate>.AccessorBase(CouchGraphQl.Data.MyBucketContext! bucketContext, Microsoft.Extensions.Logging.ILogger<CouchGraphQl.Data.AccessorBase<T, TCreate>!>! logger) -> void
CouchGraphQl.Data.AccessorBase<T, TCreate>.CreateAsync(TCreate createInfo, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<T?>!
CouchGraphQl.Data.AccessorBase<T, TCreate>.Queryable.get -> System.Linq.IQueryable<T>!
CouchGraphQl.Data.Documents.Airline
CouchGraphQl.Data.Documents.Airline.Airline() -> void
CouchGraphQl.Data.Documents.Airline.Airline(int id, CouchGraphQl.Data.Documents.AirlineCreateInput! createInput) -> void
CouchGraphQl.Data.Documents.Airline.Id.get -> int
CouchGraphQl.Data.Documents.Airline.Id.set -> void
CouchGraphQl.Data.Documents.Airline.Type.get -> string!
CouchGraphQl.Data.Documents.Airline.Type.set -> void
CouchGraphQl.Data.Documents.AirlineAccessor
CouchGraphQl.Data.Documents.AirlineAccessor.AirlineAccessor(CouchGraphQl.Data.MyBucketContext! bucketContext, Microsoft.Extensions.Logging.ILogger<CouchGraphQl.Data.Documents.AirlineAccessor!>! logger) -> void
CouchGraphQl.Data.Documents.AirlineCreateInput
CouchGraphQl.Data.Documents.AirlineCreateInput.AirlineCreateInput() -> void
CouchGraphQl.Data.Documents.AirlineCreateInput.Callsign.get -> string?
CouchGraphQl.Data.Documents.AirlineCreateInput.Callsign.set -> void
CouchGraphQl.Data.Documents.AirlineCreateInput.Country.get -> string?
CouchGraphQl.Data.Documents.AirlineCreateInput.Country.set -> void
CouchGraphQl.Data.Documents.AirlineCreateInput.Iata.get -> string?
CouchGraphQl.Data.Documents.AirlineCreateInput.Iata.set -> void
CouchGraphQl.Data.Documents.AirlineCreateInput.Icao.get -> string?
CouchGraphQl.Data.Documents.AirlineCreateInput.Icao.set -> void
CouchGraphQl.Data.Documents.AirlineCreateInput.Name.get -> string?
CouchGraphQl.Data.Documents.AirlineCreateInput.Name.set -> void
CouchGraphQl.Data.Documents.IEntityWithId<T>
CouchGraphQl.Data.Documents.IEntityWithId<T>.Id.get -> T
CouchGraphQl.Data.Documents.IEntityWithId<T>.Id.set -> void
CouchGraphQl.Data.Documents.IEntityWithId<T>.Type.get -> string!
CouchGraphQl.Data.Documents.IEntityWithId<T>.Type.set -> void
CouchGraphQl.Data.MyBucketContext
CouchGraphQl.Data.MyBucketContext.Airlines.get -> Couchbase.Linq.IDocumentSet<CouchGraphQl.Data.Documents.Airline!>!
CouchGraphQl.Data.MyBucketContext.Airlines.set -> void
CouchGraphQl.Data.MyBucketContext.MyBucketContext(Couchbase.IBucket! bucket) -> void
CouchGraphQl.GraphQl.Airline.AirlineFilterInput
CouchGraphQl.GraphQl.Airline.AirlineFilterInput.AirlineFilterInput() -> void
CouchGraphQl.GraphQl.Airline.AirlineMutations
CouchGraphQl.GraphQl.Airline.AirlineMutations.AirlineMutations() -> void
CouchGraphQl.GraphQl.Airline.AirlineMutations.CreateAirlineAsync(CouchGraphQl.Data.Documents.AirlineAccessor! airlineAccessor, CouchGraphQl.Data.Documents.AirlineCreateInput! airlineCreateInput, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<CouchGraphQl.GraphQl.Airline.CreateAirlinePayload!>!
CouchGraphQl.GraphQl.Airline.AirlineMutations.Throw() -> System.Threading.Tasks.Task<CouchGraphQl.Data.Documents.Airline?>!
CouchGraphQl.GraphQl.Airline.AirlineQueries
CouchGraphQl.GraphQl.Airline.AirlineQueries.AirlineQueries() -> void
CouchGraphQl.GraphQl.Airline.AirlineQueries.GetAirlines(CouchGraphQl.Data.Documents.AirlineAccessor! airlineAccessor) -> System.Linq.IQueryable<CouchGraphQl.Data.Documents.Airline!>!
CouchGraphQl.GraphQl.Airline.AirlineSortInput
CouchGraphQl.GraphQl.Airline.AirlineSortInput.AirlineSortInput() -> void
CouchGraphQl.GraphQl.Airline.AirlineType
CouchGraphQl.GraphQl.Airline.AirlineType.AirlineType() -> void
CouchGraphQl.GraphQl.Airline.CreateAirlinePayload
CouchGraphQl.GraphQl.Airline.CreateAirlinePayload.Airline.get -> CouchGraphQl.Data.Documents.Airline?
CouchGraphQl.GraphQl.Airline.CreateAirlinePayload.Airline.set -> void
CouchGraphQl.GraphQl.Airline.CreateAirlinePayload.CreateAirlinePayload() -> void
CouchGraphQl.GraphQl.Bucket.BucketMutations
CouchGraphQl.GraphQl.Bucket.BucketMutations.BucketMutations() -> void
CouchGraphQl.GraphQl.Bucket.BucketMutations.CreateBucketAsync(string! bucketName, CouchGraphQl.Data.MyBucketContext! context, Microsoft.Extensions.Logging.ILogger<CouchGraphQl.GraphQl.Bucket.BucketMutations!>! logger) -> System.Threading.Tasks.Task<bool>!
CouchGraphQl.GraphQl.Bucket.BucketQueries
CouchGraphQl.GraphQl.Bucket.BucketQueries.BucketQueries() -> void
CouchGraphQl.GraphQl.Bucket.BucketQueries.CheckBucketExistenceAsync(string! bucketName, Couchbase.Extensions.DependencyInjection.IClusterProvider! clusterProvider) -> System.Threading.Tasks.Task<bool>!
CouchGraphQl.GraphQl.Bucket.BucketQueries.GetBucketsAsync(Couchbase.Extensions.DependencyInjection.IClusterProvider! clusterProvider) -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Couchbase.Management.Buckets.BucketSettings!>!>!
CouchGraphQl.GraphQl.Collection.CollectionMutations
CouchGraphQl.GraphQl.Collection.CollectionMutations.CollectionMutations() -> void
CouchGraphQl.GraphQl.Collection.CollectionMutations.CreateCollectionAsync(string! bucketName, string! scopeName, string! collectionName, Couchbase.Extensions.DependencyInjection.IBucketProvider! bucketProvider, Microsoft.Extensions.Logging.ILogger<CouchGraphQl.GraphQl.Collection.CollectionMutations!>! logger) -> System.Threading.Tasks.Task<bool>!
CouchGraphQl.GraphQl.Collection.CollectionQueries
CouchGraphQl.GraphQl.Collection.CollectionQueries.CollectionQueries() -> void
CouchGraphQl.GraphQl.Collection.CollectionQueries.GetCollectionsAsync(string! bucketName, string! scopeName, Couchbase.Extensions.DependencyInjection.IBucketProvider! bucketProvider, Microsoft.Extensions.Logging.ILogger<CouchGraphQl.GraphQl.Scope.ScopeQueries!>! logger, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<string!>!>!
CouchGraphQl.GraphQl.Scope.Scope
CouchGraphQl.GraphQl.Scope.Scope.Collections.get -> System.Collections.Generic.IEnumerable<string!>!
CouchGraphQl.GraphQl.Scope.Scope.Collections.init -> void
CouchGraphQl.GraphQl.Scope.Scope.Name.get -> string!
CouchGraphQl.GraphQl.Scope.Scope.Name.init -> void
CouchGraphQl.GraphQl.Scope.Scope.Scope(string! Name, System.Collections.Generic.IEnumerable<string!>! Collections) -> void
CouchGraphQl.GraphQl.Scope.ScopeMutations
CouchGraphQl.GraphQl.Scope.ScopeMutations.CreateScopeAsync(string! scopeName, string! bucketName, Couchbase.Extensions.DependencyInjection.IBucketProvider! bucketProvider, Microsoft.Extensions.Logging.ILogger<CouchGraphQl.GraphQl.Scope.ScopeMutations!>! logger, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<bool>!
CouchGraphQl.GraphQl.Scope.ScopeMutations.ScopeMutations() -> void
CouchGraphQl.GraphQl.Scope.ScopeQueries
CouchGraphQl.GraphQl.Scope.ScopeQueries.GetScopesInBucketAsync(string! bucketName, Couchbase.Extensions.DependencyInjection.IBucketProvider! bucketProvider, Microsoft.Extensions.Logging.ILogger<CouchGraphQl.GraphQl.Scope.ScopeQueries!>! logger, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<CouchGraphQl.GraphQl.Scope.Scope!>!>!
CouchGraphQl.GraphQl.Scope.ScopeQueries.ScopeQueries() -> void
CouchGraphQl.GraphQl.Shared.LoqQueryAttribute
CouchGraphQl.GraphQl.Shared.LoqQueryAttribute.LoqQueryAttribute() -> void
CouchGraphQl.GraphQl.Shared.ObjectTypeWithId<T>
CouchGraphQl.GraphQl.Shared.ObjectTypeWithId<T>.ObjectTypeWithId() -> void
CouchGraphQl.Program
CouchGraphQl.Program.Program() -> void
override CouchGraphQl.Data.Documents.AirlineAccessor.MakeEntity(int id, CouchGraphQl.Data.Documents.AirlineCreateInput! createInfo) -> CouchGraphQl.Data.Documents.Airline!
override CouchGraphQl.GraphQl.Airline.AirlineFilterInput.Configure(HotChocolate.Data.Filters.IFilterInputTypeDescriptor<CouchGraphQl.Data.Documents.Airline!>! descriptor) -> void
override CouchGraphQl.GraphQl.Airline.AirlineSortInput.Configure(HotChocolate.Data.Sorting.ISortInputTypeDescriptor<CouchGraphQl.Data.Documents.Airline!>! descriptor) -> void
override CouchGraphQl.GraphQl.Shared.LoqQueryAttribute.OnConfigure(HotChocolate.Types.Descriptors.IDescriptorContext! context, HotChocolate.Types.IObjectFieldDescriptor! descriptor, System.Reflection.MemberInfo! member) -> void
override CouchGraphQl.GraphQl.Shared.ObjectTypeWithId<T>.Configure(HotChocolate.Types.IObjectTypeDescriptor<T>! descriptor) -> void
virtual CouchGraphQl.GraphQl.Shared.ObjectTypeWithId<T>.ConfigureImplementation(HotChocolate.Types.IObjectTypeDescriptor<T>! descriptor) -> void